#include <cstdlib>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <bitset>
#include <vector>
#include <unordered_map>
#include <cstring>
#include <math.h>

using namespace std;

// Byte-level bit manipulations
#define GETBITVAL(n, i) ((n >> (7 - i)) & 0x01)
#define SETBITVAL(n, i) (n | (0x01 << (7 - i)))
#define CLRBITVAL(n, i) (n & ~(0x01 << (7 - i)))

#define MAX(a, b) ((a < b) ? b : a)
#define MIN(a, b) ((a < b) ? a : b)

// Check if n is a power of 2
#define ISPOWOF2(n)     ((n != 0) && ((n & (n - 1)) == 0))

/* Data structures */
/* Bit-map data structure */
typedef struct _bitmap {
    char *bitmap;
    long size;           // Could remove later on
} BitMap;

/* Rank data structure */
typedef struct _rank {
    int l;
    int b;
    int s;
    BitMap **smallrank;
    BitMap *blockrank;
    BitMap *superblockrank;
} Rank;

/* Select data structure */
/*
typedef struct _select {
    long b;
    long *s;             // Must remove!!
    BitMap *superblockselect;
} Select;
*/
typedef Rank Select;

/* Wavelet tree data structure */
typedef struct _wletn {
    struct _wletn *left, *right;
    BitMap B;
    Rank r;
    Select s;
} WaveletNode;

/* Data Structure to store compressed bitmap for Elias-Fano Scheme */
typedef struct _CA {
    BitMap Q;
    BitMap *R;
    Select s;
    long d;
    long n;
} CompressedArray;

/* CSA node data structure */
typedef struct _csanode {
    BitMap B;
    Rank r;
    CompressedArray psi;
    long *SA;
    long *SAinv;
    struct _csanode *next;
} CsaNode;

/* Cumulative count and its inverse */
// Note: the alphabet characters are assumed to be mapped to 0..(sigma-1)
typedef struct _C {
    unordered_map<char, pair<int, int> > C;
    BitMap D;
    Rank r;
    char *S;
} CumulativeCount;

// The suffix comparator
typedef struct _SC {
    long *pos;
    long gap;
    long n;
    bool operator() (long i, long j) {
        if (pos[i] != pos[j])
        return pos[i] < pos[j];
        i += gap;
        j += gap;
        return (i < n && j < n) ? pos[i] < pos[j] : i > j;
    }
} SuffixComparator;

/* Helper Functions */
// Integer logarithm to the base 2 -- fast
long intLog2(long n) {
    long l = ISPOWOF2(n) ? 0 : 1;
    
    while (n >>= 1) ++l;
    
    return l;
}

long computeSize(BitMap B) {
    
    return ceil(B.size / 8);
}

long computeSize(Rank r) {
    
    long s = 3 * sizeof(int);
    
    for (long i = 0; i < 1 << r.s; i++)
        for (long j = 0; j < r.s; j++)
            s += computeSize(r.smallrank[i][j]);
    
    return s;
}

long computeSize(WaveletNode w) {
    
    return 0;
}

long computeSize(CsaNode c) {
    
    return 0;
}

/* Bit-map operations */
// Creates a bitmap, initialized to all zeros
BitMap initBitmap(long n) {
    
    long size = (n / 8) + 1;
    BitMap B;
    B.bitmap = new char[size];
    
    for (long i = 0; i < size; ++i) {
        B.bitmap[i] = (char)0x00;
    }
    B.size = n;
    return B;
}

// Access bit stored at i-th index
bool accessBit(BitMap B, long i) {
    
    return (bool)GETBITVAL(B.bitmap[i / 8], i % 8);
}

// Set bit at i-th index
void setBit(BitMap B, long i) {
    
    B.bitmap[i / 8] = SETBITVAL(B.bitmap[i / 8], i % 8);
}

// Clear bit at i-th index
void clearBit(BitMap B, long i) {
    
    B.bitmap[i / 8] = CLRBITVAL(B.bitmap[i / 8], i % 8);
}

// Returns bitmap size
long getBitmapSize(BitMap B, long i) {
    
    return B.size;
}

// Creates a bitmap of a given value and specified size
BitMap createBitmap(long value, long n) {
    
    long numBits = intLog2(value);
    numBits = ISPOWOF2(value) ? (numBits + 1) : numBits;
    
    BitMap B = initBitmap(n);
    
    for (long i = 0; i < numBits; ++i) {
        long bit = value & 1;
        if (bit) setBit(B, n - i - 1);
        value >>= 1;
    }

    return B;
}

// Creates a compact bitmap of a given value with intLog2(n) bits
BitMap createBitmap(long value) {
    
    long numBits = intLog2(value);
    numBits = ISPOWOF2(value) ? (numBits + 1) : numBits;
    
    return createBitmap(value, numBits);
}

long createInteger(BitMap B, long s, long e) {
    long n = 0;
    
    for (long i = s; i <= e; ++i) {
        if(accessBit(B, i)) n += (1 << ((e - s + 1) - (i - s) - 1));
    }
    
    return n;
}

/* Build Rank data structure */
// Inefficiently computes rank of bitmap B(i...j) substring
long getRank1Ineff(BitMap B, long i, long j) {
    
    long r = 0;
    
    for (long k = i; k <= j; k++)
        if (accessBit(B, k))
            r++;
    
    return r;
}

// Creates the small rank table for parameter t
BitMap **createSmallRank(long t) {
    
    long rt_n = 1 << t;
    BitMap **smallrank = new BitMap*[rt_n];
    
    for (long i = 0; i < rt_n; ++i) {
        smallrank[i] = new BitMap[t];
        for (long j = 0; j < t; ++j) {
            smallrank[i][j] = createBitmap(getRank1Ineff(createBitmap(i, intLog2(rt_n)), 0, j));
        }
    }
    
    return smallrank;
}

// Creates the rank table for the Bitmap B with block size k
BitMap *createRank(BitMap B, long k) {
    
    long size = (B.size / k) + 1;
    BitMap *rank = new BitMap[size];
    
    for (long i = 0; i < size; ++i)
        rank[i] = createBitmap(getRank1Ineff(B, 0, i * k - 1));
    
    return rank;
    
}

// Creates the blockrank table for Bitmap B with block size b
BitMap *createBlockRank(BitMap B, BitMap *superblockrank, long b) {
    
    BitMap *boundaryrank = createRank(B, b);
    long size = (B.size / b) + 1;
    BitMap *blockrank = new BitMap[size];
    
    for (long i = 0; i < size; ++i) {
        long br = createInteger(boundaryrank[i], 0, boundaryrank[i].size - 1);
        long sr = createInteger(superblockrank[i / b], 0,
                               superblockrank[i / b]. size - 1);
        blockrank[i] = createBitmap(br - sr);
    }
    
    return blockrank;
}

// Builds the Rank Data Structure
Rank buildRank(BitMap B) {
    
    Rank r;
    long log = intLog2(B.size);
    r.s = ceil((double)log / 2);
    r.b = log;
    r.l = log * log;
    
    r.smallrank = createSmallRank(r.s);
    r.superblockrank = createRank(B, r.l);
    r.blockrank = createBlockRank(B, r.superblockrank, r.b);
    
    return r;
}

// returns rank1(B, i)
long getRank1(BitMap B, Rank r, long i) {
    long sb_i = (i + 1) / r.l;
    long b_i = (i + 1) / r.b;
    long sm = i % r.b;
    long sp1 = b_i * r.b;
    long sp2 = b_i * r.b + r.s;
    long smindex1 = createInteger(B, sp1, sp1 + r.s - 1); // createInteger still takes O(logn) time; must fix
    long smindex2 = createInteger(B, sp2, sp2 + r.s - 1);
    long v1 = createInteger(r.superblockrank[sb_i], 0, r.superblockrank[sb_i].size - 1);
    long v2 = createInteger(r.blockrank[b_i], 0, r.blockrank[b_i].size - 1);
    long v3;
    if (sm == r.b - 1) {
        v3 = 0;
    } else if (sm < r.s) {
        v3 = createInteger(r.smallrank[smindex1][sm], 0, r.smallrank[smindex1][sm].size - 1);
    } else {
        v3 = createInteger(r.smallrank[smindex1][r.s - 1], 0, r.smallrank[smindex1][r.s - 1].size - 1);
        v3 += createInteger(r.smallrank[smindex2][sm % r.s], 0, r.smallrank[smindex2][sm % r.s].size - 1);
    }
    
    return  v1 + v2 + v3;
}

// returns rank0(B, i)
long getRank0(BitMap B, Rank r, long i) {
    
    return i - getRank1(B, r, i) + 1;
    
}

/* Build Select data structure */
// Compute select(B, i) inefficiently
long getSelect1Ineff(BitMap B, long i) {
    
    long sel = -1, count = 0;
    for (long k = 0; k < B.size; ++k) {
        if (accessBit(B, k)) count++;
        if (count == (i + 1)) {
            sel = k;
            break;
        }
    }
    
    return sel;
}

// Builds select struture
Select buildSelect(BitMap B) {
    return buildRank(B);
}

// Binary search for bitmap lists
long binSearchBitmap(BitMap *list, long val, long i, long j) {
    
    long sp = i;
    long ep = j;
    long m, listval;
    while (sp <= ep) {
        m = (sp + ep) / 2;
        listval = createInteger(list[m], 0, list[m].size - 1);
        // cout << "(" << sp << ", " << ep << ")\n";
        // cout << "superblock[" << m << "] = " << listval << endl;
        if (val == listval) {
            // cout << "Value found!" << endl;
            return m - 1;
        }
        else if (val < listval) {
            // cout << "Value not found, searching left..." << endl;
            ep = m - 1;
        }
        else {
            // cout << "Value not found, searching right..." << endl;
            sp = m + 1;
        }
    }
    
    return ep;
}

// Returns select(B, i)
long getSelect(BitMap B, Select s, long i) {
    
    long sb_size = (B.size / s.l) + 1;
    long left_to_count = (i + 1);
    
    // Binary search to find superblock index
    long sb_idx = binSearchBitmap(s.superblockrank, left_to_count, 0, sb_size - 1);
    long b_size = (B.size / s.b) + 1;
    long b_per_sb = (s.l / s.b);
    left_to_count -=
        createInteger(s.superblockrank[sb_idx], 0, s.superblockrank[sb_idx].size - 1);
    
    // Binary search to find block index
    long b_range1 = sb_idx * b_per_sb;
    long b_range2 = MIN(sb_idx * b_per_sb + b_per_sb - 1, b_size);
    long b_idx = binSearchBitmap(s.blockrank,
                                (i + 1) -
                                createInteger(s.superblockrank[sb_idx],
                                              0,
                                              s.superblockrank[sb_idx].size - 1),
                                b_range1, b_range2);
    
    // cout << endl;
    // cout << "Block Range: (" << b_range1 << ", " << b_range2 << ")\n";
    
    left_to_count -=
        createInteger(s.blockrank[b_idx], 0, s.blockrank[b_idx].size - 1);
    
    long count = 0, b_sel = 0;
    
    // cout << "Left to count:\t" << left_to_count << endl;
    // cout << "Block:\t";
    
    // Linear search to find superblock index
    for (long j = 0; j < s.b; j++) {
        // cout << accessBit(B, b_idx + j);
        if (accessBit(B, b_idx * s.b + j)) {
            count++;
        }
        if (count == left_to_count) {
            b_sel = j;
            break;
        }
    }
    // cout << endl;
    
    // cout << "(" << b_idx << ", " << b_sel << ")";
    return b_idx * s.b + b_sel;
}

/* Build wavelet tree */
WaveletNode *buildWaveletTree(const char *S, long *alpha_rank, long i, long j) {
    
    if (i == j) {
        return NULL;
    }
    
    WaveletNode *root = new WaveletNode;
    long m = (i + j)/2;
    long n = strlen(S);
    string l = "";
    string r = "";
    
    root->B = initBitmap(n);
    for (long k = 0; k < n; ++k) {
        if (alpha_rank[S[i]] > m) { // Right subtree
            setBit(root->B, 1);
            r += S[i];
        } else {                    // Left subtree
            l += S[i];
        }
    }
    
    root->r = buildRank(root->B);
    root->s = buildSelect(root->B);
    root->left = buildWaveletTree(l.c_str(), alpha_rank, i, m);
    root->right = buildWaveletTree(r.c_str(), alpha_rank, m + 1, j);
    
    return root;
}

/* Build the suffix array */
// Function that builds the Suffix Array
long *buildSA(char *T)
{
    long n = strlen(T);
    long *SA = new long[n];
    long *pos = new long[n];
    long *tmp = new long[n];
    
    for (long i = 0; i < n; ++i) {
        SA[i] = i;
        pos[i] = T[i];
    }
    
    for (long gap = 1;; gap *= 2)
    {
        SuffixComparator sufCmp;
        sufCmp.pos = pos;
        sufCmp.gap = gap;
        sufCmp.n = n;
        sort(SA, SA + n, sufCmp);
        
        for (long i = 0; i < n - 1; ++i) {
            tmp[i + 1] = tmp[i] + sufCmp(SA[i], SA[i + 1]);
        }
        
        for (long i = 0; i < n; ++i) {
            pos[SA[i]] = tmp[i];
        }
        
        if (tmp[n - 1] == n - 1) break;
    }
    
    return SA;
}

/* Build the cumulative count array */
CumulativeCount buildC(long *SA, char *T, long n) {
    
    CumulativeCount C;
    long alpha_size = 1;
    C.D = initBitmap(n);
    
    
    for (long i = 1; i < n; ++i) {
        if (T[SA[i]] != T[SA[i - 1]]) {
            setBit(C.D, i);
            alpha_size++;
        }
    }
    
    C.r = buildRank(C.D);
    
    C.S = new char[alpha_size + 2];
    C.S[0] = T[SA[0]];
    C.C[C.S[0]] = pair<int, int>(0, 0);
    long i;
    for (i = 1; i < alpha_size; i++) {
        C.S[i] = T[SA[getSelect1Ineff(C.D, i - 1)]];
        C.C[C.S[i]] = pair<int, int>(getSelect1Ineff(C.D, i - 1), i);
    }
    C.C['~'] = pair<int, int> (n, i);
    C.S[i] = '~';
    return C;
}

/* Build the Successor Array (psi) */
// Find the position of element in array
long findPos(long *A, long n, long v) {
    
    long pos;
    
    for (long i = 0; i < n; ++i) {
        if (A[i] == v) {
            return i;
        }
    }
    
    return -1;
}

// Function to build the successor array
long *buildPsi(long *SA, long n) {
    
    long *psi = new long[n];
    
    // Very bad implementation!
    for(long i = 0; i < n; i++) {
        psi[i] = findPos(SA, n, (SA[i] + 1) % n);
    }
    
    return psi;
}

long rho(char c, long x, long n, CumulativeCount C) {
    
    return n * C.C[c].second + x;
}

long rhoInv(long y, long n) {
    return y % n;
}

// Function to compress psi
CompressedArray compressPsi(long *psi, long n, char *T, long *SA, CumulativeCount C) {
    long *psi1 = new long[n];
    long d = 1 << intLog2(C.C.size());
    long *q = new long[n];
    BitMap *r = new BitMap[n];
    long *del = new long[n];
    BitMap B = initBitmap(2 * n);
    long k = 0;
    
    cout << "d = " << d << endl;
    
    for (long i = 0; i < n; i++) {
        q[i] = rho(T[SA[i]], psi[i], n, C) / d;
        r[i] = createBitmap(rho(T[SA[i]], psi[i], n, C) % d);
        
        cout << "q[" << i << "] = " << q[i] << endl;
        cout << "r[" << i << "] = " << createInteger(r[i], 0, r[i].size - 1) << endl;
        if (i > 0) {
            del[i] = q[i] - q[i - 1];
        } else {
            del[i] = q[i];
        }
        
        cout << "del(q[" << i << "]) = " << del[i] << endl;
        
        cout << "k is " << k << endl;
        cout << "setting bit:\t\t" << k + del[i] << endl;
        setBit(B, k + del[i]);
        k += (del[i] + 1);
    }
    
    CompressedArray a;
    a.Q = B;
    a.R = r;
    a.s = buildSelect(B);
    a.d = d;
    a.n = n;
    
    return a;
}

long accessPsi(CompressedArray psi, long i, CumulativeCount C) {
    
    return rhoInv((getSelect(psi.Q, psi.s, i) - i) * psi.d + createInteger(psi.R[i], 0, psi.R[i].size - 1), psi.n);
}

/* Test and debug */
// Prlong array to screen
void displayArr(long *A, long n, const char *dsc) {
    
    cout << dsc << ":\t";
    for (long i = 0; i < n; i++) {
        cout << A[i] << "\t";
    }
    cout << endl;
}

// Prlong bitmap to screen
void displayBitmap(BitMap B) {
    
    for (long i = 0; i < B.size; ++i) {
        cout << accessBit(B, i);
    }
}

/* Build CSA Index */
BitMap evenBitmap(long *SA, long n) {
    
    BitMap B = initBitmap(n);
    
    for (long i = 0; i < n; ++i)
    if (SA[i] % 2 == 0)
    setBit(B, i);
    
    return B;
}

// Extracts the values of psi corresponding to odd SA values - Used in GVCSA
long *oddPsi(long *SA, long n, long r) {
    
    long *psi = buildPsi(SA, n);
    long *oddpsi = new long[r];
    long k = 0;
    
    for (long i = 0; i < n; ++i)
    if (SA[i] % 2)
    oddpsi[k++] = psi[i];
    
    return oddpsi;
}

// Creates the inverse arra of SA
long *createSAinv(long *SA, long n) {
    
    long *SAinv = new long[n];
    
    for (long i = 0; i < n; i++) {
        SAinv[SA[i]] = i;
    }
    
    return SAinv;
}

// Build the CSA
CsaNode *buildCSA(long *SA, char *T, CumulativeCount C, long n, long cur_l, long ter_l) {
    
    CsaNode *current = new CsaNode;
    if (cur_l == ter_l - 1) {
        current->B.bitmap = NULL;
        current->SA = SA;
        current->SAinv = createSAinv(SA, n);
        current->next = NULL;
        cout << "Level:\t" << cur_l << endl;
        displayArr(SA, n, "SA");
        displayArr(current->SAinv, n, "SAinv");
        return current;
    }

    current->B = evenBitmap(SA, n);
    current->r = buildRank(current->B);
    long r0 = getRank0(current->B, current->r, current->B.size - 1);
    long r1 = getRank1(current->B, current->r, current->B.size - 1);
    
    
    // Uncomment for GV-CSA:
    // current->psi = oddPsi(SA, n, r0);
    
    // Comment for GV-CSA:
    current->psi = compressPsi(buildPsi(SA, n), n, T, SA, C); // TODO
    
    current->SA = NULL;
    current->SAinv = NULL;
    
    cout << "Level:\t" << cur_l << endl;
    displayArr(SA, n, "SA");
    displayArr(createSAinv(SA, n), n, "SAinv");
    cout << "B:\t";
    displayBitmap(current->B);
    cout << endl;
    // displayArr(buildPsi(SA, n), n, "Psi");
    displayArr(buildPsi(SA, n), n, "Psi"); // Can remove
    cout << "Rank:\t";
    for (long i = 0; i < n; i++) {
        cout << getRank1(current->B, current->r, i) << "\t";
    }
    cout << endl;
    
    long *SAnext = new long[r1];
    long k = 0;
    for (long i = 0; i < n; ++i)
        if (SA[i] % 2 == 0)
            SAnext[k++] = SA[i] / 2;
    
    current->next = buildCSA(SAnext, T, C, r1, cur_l + 1, ter_l);
    return current;
}

/* Function to lookup SA[i] */
long lookupSA(long i, CsaNode *n, CumulativeCount C) {
    if (n->next == NULL) {
        // cout << "Found SA[" << i << "] = " << n->SA[i] << endl;
        return n->SA[i];
    }
    
    if (accessBit(n->B, i)) {
        // cout << i << ")Looking at 2 * lookup(" << getRank1(n->B, n->r, i) - 1 << ")\n";
        return 2 * lookupSA(getRank1(n->B, n->r, i) - 1, n->next, C);
    }
    else {
        // cout << i << ")Looking at lookup(psi[" << getRank0(n->B, n->r, i) - 1 << "] = " << n->psi[getRank0(n->B, n->r, i) - 1] << ")\n";
        
        // Uncomment for GV-CSA
        // return lookupSA(n->psi[getRank0(n->B, n->r, i) - 1], n) - 1;
        return lookupSA(accessPsi(n->psi, i, C), n, C) - 1; // TODO
    }
}

/* Function to lookup SAinverse[i] */
long lookupSAinv(long i, CsaNode *n, CumulativeCount C) {
    if (n->next == NULL) {
        return n->SAinv[i];
    }
    
    if (accessBit(n->B, i)) {
        return 2 * lookupSAinv(getRank1(n->B, n->r, i) - 1, n->next, C);
    } else {
        return accessPsi(n->psi, lookupSAinv(i - 1, n, C), C); // TODO
    }
    return 0;
}

/* Function to compare */
long compare(CsaNode *n, CumulativeCount C, const char *p, long i) {
    
    long j = 0;
    do {
        char c = C.S[getRank1(C.D, C.r, i)];
        if (p[j] < c) {
            return -1;
        } else if(p[j] > c) {
            return 1;
        }
        i = accessPsi(n->psi, i, C); // TODO
        j++;
    } while (j < strlen(p));
    
    return 0;
}

pair<int, int> getRange(CsaNode *n, CumulativeCount C, const char * p) {
    
    long st = n->B.size - 1;
    long sp = 0;
    long s;
    while(sp < st) {
        s = (sp + st) / 2;
        if (compare(n, C, p, s) > 0) sp = s + 1;
        else st = s;
    }
    
    long et = n->B.size - 1;
    long ep = sp - 1;
    long e;
    while (ep < et) {
        e = ceil((double)(ep + et) / 2);
        if (compare(n, C, p, e) == 0) ep = e;
        else et = e - 1;
    }
    
    pair<int, int> range(sp, ep);
    
    return range;
}

long getCount(CsaNode *n, CumulativeCount C, const char * p) {
    
    pair<int, int> range = getRange(n, C, p);
    
    return (range.second < range.first) ? 0 : range.second - range.first + 1;
}

/* Function to forward search */
long *search(CsaNode *n, CumulativeCount C, const char * p) {
    
    pair<int, int> range = getRange(n, C, p);
    long sp = range.first, ep = range.second;
    long *positions = new long[ep - sp + 1];
    for (long i = 0; i < ep - sp + 1; i++)
        positions[i] = lookupSA(sp + i, n, C);

    return positions;
}

// Extract portion of text between indices (i, j)
char *extract(CsaNode *n, CumulativeCount C, long i, long j) {
    
    char *txt = new char[j - i + 1];
    long s = lookupSAinv(i, n, C);
    
    for (long k = 0;  k < j - i + 1; k++) {
        txt[k] = C.S[getRank1(C.D, C.r, s)];
        s = accessPsi(n->psi, s, C); // TODO
    }
    
    return txt;
}

// Binary search
long binSearchPsi(CompressedArray psi, CumulativeCount C, long val, long s, long e, bool flag) {
    
    long sp = s;
    long ep = e;
    long m;
    
    // cout << "Searching in psi : " << endl;
    while (sp < ep) {
        m = (sp + ep) / 2;
        // cout << A[m] << endl;
        if (accessPsi(psi, m, C) == val) return m;
        else if(val < accessPsi(psi, m, C)) ep = ep - 1;
        else sp = sp + 1;
    }
    
    // cout << "Search over" << endl;
    
    return flag ? MAX(ep, s) : MIN(sp, e);
}

// Get range of SA positions using Backward search
pair<int, int> getRangeBck(CsaNode *c, CumulativeCount C, const char *p) {
    
    pair<int, int> range(0, -1);
    long *locations;
    long m = strlen(p);
    long n = c->B.size;
    long sp, ep, c1, c2;
    if (C.C.find(p[m - 1]) != C.C.end()) {
        sp = (C.C[p[m - 1]]).first;
        ep = C.C[C.S[C.C[p[m - 1]].second + 1]].first - 1;
    } else return range;
    
    cout << "(" << sp << "," << ep << ")\n";
    CompressedArray psi = c->psi;
    
    for (long i = m - 2; i >= 0; i--) {
        if (C.C.find(p[m - 1]) != C.C.end()) {
            c1 = C.C[p[i]].first;
            c2 = C.C[C.S[C.C[p[i]].second + 1]].first - 1;
        } else return range;
        
        // cout << "[" << c1 << "," << c2 << "]\n";
        /*
        long st = c2;
        long sp_t = c1;
        long s;
        while(sp_t < st) {
            s = (sp_t + st) / 2;
            if (psi[s] >= sp) sp_t = s + 1;
            else st = s;
        }
        
        long et = c2;
        long ep_t = sp_t - 1;
        long e;
        while (ep_t < et) {
            e = ceil((double)(ep_t + et) / 2);
            if (psi[s] <= ep) ep_t = e;
            else et = e - 1;
        }
        sp = sp_t;
        ep = ep_t;
         */
        sp = binSearchPsi(psi, C, sp, c1, c2, false);
        ep = binSearchPsi(psi, C, ep, c1, c2, true);
        // cout << "(" << sp << "," << ep << ")\n";
        if (sp > ep) return range;
    }
    
    range.first = sp;
    range.second = ep;
    
    return range;
}

// Get count of pattern occurrances
long getCountBck(CsaNode *n, CumulativeCount C, const char * p) {
    
    pair<int, int> range = getRangeBck(n, C, p);
    
    return range.second - range.first + 1;
}

/* Function for backward search */
long *bckSearch(CsaNode *n, CumulativeCount C, const char *p) {
    pair<int, int> range = getRange(n, C, p);
    long sp = range.first, ep = range.second;
    long *positions = new long[ep - sp + 1];
    for (long i = 0; i < ep - sp + 1; i++)
        positions[i] = lookupSA(sp + i, n, C);
    
    return positions;
}


// Main function
int main(int argc, char *argv[]) {

    // Read data from file
    char *T;
    ifstream ip;
    long n;
    ip.open(argv[1]);
    string str((istreambuf_iterator<char>(ip)),
               istreambuf_iterator<char>());
    T = (char *) str.c_str();
    n = str.length();
    ip.close();
    cout << "File read into memory!" << endl;
    
    long *SA = buildSA(T);
    
    cout << "Built SA" << endl;
    
    /*
    CumulativeCount C = buildC(SA, T, n);
    
    CompressedArray ca = compressPsi(psi, n, T, SA, C);
    
    cout << "Q:\t";
    displayBitmap(ca.Q);
    cout << endl;
    
    cout << "psi_c:\t";
    for (long i = 0; i < n; i++) {
        cout << accessPsi(ca, i, C, n) << "\t";
    }
    cout << endl;
    */
    
    /*
    BitMap B = initBitmap(31);
    // 0101101001110100
    setBit(B, 1);
    setBit(B, 3);
    setBit(B, 4);
    setBit(B, 6);
    setBit(B, 9);
    setBit(B, 10);
    setBit(B, 11);
    setBit(B, 13);
    setBit(B, 15);
    setBit(B, 17);
    setBit(B, 19);
    setBit(B, 21);
    setBit(B, 23);
    setBit(B, 26);
    setBit(B, 27);
    setBit(B, 28);
    
    cout << "B: ";
    displayBitmap(B);
    cout << endl;
    
    Rank r = buildRank(B);
    
    cout << "s = " << r.s << endl;
    cout << "b = " << r.b << endl;
    cout << "l = " << r.l << endl;
    
    cout << endl;
    cout << "smallrank: " << endl;
    for (long i = 0; i < 1 << r.s; i++) {
        displayBitmap(createBitmap(i, intLog2(1 << r.s)));
        cout << ":\t";
        for (long j = 0; j < r.s; j++) {
            displayBitmap(r.smallrank[i][j]);
            cout << "\t";
        }
        cout << endl;
    }
    cout << endl;
    
    cout << "blockrank: " << endl;
    for (long i = 0; i < (B.size/r.b) + 1; i++) {
        cout << createInteger(r.blockrank[i], 0, r.blockrank[i].size - 1) << "\t";
    }
    cout << endl;
    cout << endl;
    
    cout << "superblockrank: " << endl;
    for (long i = 0; i < (B.size/r.l) + 1; i++) {
        cout << createInteger(r.superblockrank[i], 0, r.superblockrank[i].size - 1) << "\t";
    }
    cout << endl;
    cout << endl;
    
    for (long i = 0; i < B.size; ++i) {
        cout << "Rank(B, " << i << "): " << getRank1(B, r, i) << endl;
    }
    
    cout << "B: ";
    displayBitmap(B);
    cout << endl;
    
    for (long i = 0; i < getRank1(B, r, B.size - 1); ++i) {
        cout << "Select(B, " << i << "): " << getSelect(B, (Select)r, i) << " : " << getSelect1Ineff(B, i) << endl;
    }
    */
    
    /*
    cout << "SA lookups:\n";
    for (long i = 0; i < n; i++) {
        cout << lookupSA(i, csa) << endl;
    }
    cout << endl;
    
    cout << "SAinv lookups:\n";
    for (long i = 0; i < n; i++) {
        cout << lookupSAinv(i, csa) << endl;
    }
    cout << endl;
    */
    
    CumulativeCount C = buildC(SA, T, n);
    cout << "Built Auxillary Data Structures!" << endl;
    long l = intLog2(intLog2(n));
    // cout << "Number of levels: " << l << endl;
    CsaNode *csa = buildCSA(SA, T, C, n, 0, l);
    cout << "Built Compressed SA!" << endl;
    
    delete SA;
    delete T;
    
    cout << "Removed unnecessary data strucutures." << endl;
    /*
    cout << endl;
    
    cout << "T[SA]:\t";
    for (long i = 0; i < n; i++) {
        cout << T[SA[i]] << "\t";
    }
    cout << endl;
    
    
    cout << "C:\t";
    for (auto kv : C.C) {
        cout << "(" << kv.first << ", (" << kv.second.first << ", " << kv.second.second << "))\t";
    }
    cout << endl;
    
    cout << "D:\t";
    displayBitmap(C.D);
    cout << endl;
    
    cout << "Rank:\t";
    for (long i = 0; i < n; i++) {
        cout << getRank1(C.D, C.r, i) << "\t";
    }
    
    cout << endl;
    cout << "S:\t";
    for (long i = 0; i < getRank1(C.D, C.r, C.D.size - 1) + 1; i++) {
        cout << C.S[i] << "\t";
    }
    
    cout << endl;
    */
    
    char p[100];
    do {
        cout << "Enter pattern to search: ";
        cin >> p;
    
        pair<int, int> range = getRange(csa, C, (const char*)p);
        cout << "SA range: (" << range.first << ", " << range.second << ")" << endl;
    
        long count = getCount(csa, C, (const char*)p);
        cout << "Count: " << count << endl;
    
        long *locs = search(csa, C, (const char*)p);
        displayArr(locs, count, "Locations:");
    
    } while (strcmp(p, "quit"));
    
    /*
    long start, end;
    cout << "Inter indices to extract text: " << endl;
    cout << "Enter i: ";
    cin >> start;
    cout << "Enter j: ";
    cin >> end;
    cout << "Extracted Text: " << extract(csa, C, start, end) << endl;
    */
    
    return 0;
}